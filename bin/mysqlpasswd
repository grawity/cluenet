#!/usr/bin/env perl
# mysqlpasswd - MySQL password change tool
use warnings;
use strict;
use DBI;
use Getopt::Long qw(:config bundling no_ignore_case);
use Term::ReadPassword;

use constant MIN_LENGTH	=> 2;

sub usage {
	print "Usage: mysqlpasswd [-h|--host <host>] [-s|-ssl] [<username>]\n";
	exit 2;
}

sub getpass {
	read_password(shift, 0, 1) // exit;
}

sub handle_err {
	warn "$DBI::errstr\n";
	exit 1;
}

my $dbhost	= "localhost";
my $usessl	= 0;

GetOptions(
	'h|host=s'	=> \$dbhost,
	's|ssl!'	=> \$usessl,
) or usage();

my $user = shift(@ARGV) // getlogin();

if ($usessl) {
	$dbhost .= ":mysql_ssl=1";
}
elsif ($dbhost ne 'localhost') {
	# 'localhost' uses Unix sockets, is okay
	warn "\e[1;31mWarning:\e[;1m Your password will be transmitted in clear text. To avoid this,\n";
	warn "         enable SSL with the -s option, or change the password over SSH.\e[m\n";
}

my $oldpass = getpass("Old MySQL password: ");
my $dbh = DBI->connect("DBI:mysql:host=$dbhost", $user, $oldpass,
	{HandleError => \&handle_err});

my $newpass = getpass("New MySQL password: ");
my $confirm = getpass("Reenter new password: ");
if ($newpass ne $confirm) {
	print "Password mismatch.\n";
	exit 1;
}
if (length($newpass) < MIN_LENGTH) {
	print "Password too short.\n";
	exit 1;
}

my $sth = $dbh->prepare("SET PASSWORD = PASSWORD(?)");
if ($sth->execute($newpass)) {
	print "Password for '$user' changed.\n";
} else {
	handle_err;
}
