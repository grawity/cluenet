#!/usr/bin/env perl
use warnings;
use strict;
use feature "say";
use DBI;
use Getopt::Long qw(:config bundling no_ignore_case);
use Term::ReadPassword;

use constant {
	MIN_LENGTH	=> 2,
};

sub usage {
	say "Usage: mysqlpasswd [-h host] [--ssl]";
	exit 2;
}

sub getpass { read_password(shift, 0, 1) // exit; }

sub handle_err { say $DBI::errstr; exit 1; }

sub Main {
	my $dbhost	= "localhost";
	my $usessl	= 0;

	GetOptions(
		'h|host=s'	=> \$dbhost,
		's|ssl!'	=> \$usessl,
	) or usage();

	my $user = shift(@ARGV) // getlogin();

	if ($usessl) {
		$dbhost .= ":mysql_ssl=1";
	}

	my $oldpass = getpass("Old MySQL password: ");
	my $dbh = DBI->connect("DBI:mysql:host=$dbhost", $user, $oldpass,
		{HandleError => \&handle_err});

	my $newpass = getpass("New MySQL password: ");
	my $confirm = getpass("Reenter new password: ");
	if ($newpass ne $confirm) {
		say "Password mismatch.";
		exit 1;
	}
	if (length($newpass) < MIN_LENGTH) {
		say "Password too short.";
		exit 1;
	}

	my $sth = $dbh->prepare("SET PASSWORD = PASSWORD(?)");
	if ($sth->execute($newpass)) {
		say "Password for '$user' changed.";
	} else {
		handle_err;
	}
}

Main;
