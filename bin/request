#!/usr/bin/env perl
use warnings;
use strict;
use feature "say";
use feature "switch";
use Cluenet::Common;
use Cluenet::Rpc;
use Cluenet::Rpc::Client;
use Data::Dumper;
use Getopt::Long qw(:config bundling no_ignore_case);

my $rpc;

sub confirm {
	my $text = shift;
	print "$text [yn] ";
	exit unless <STDIN> =~ /^y/i;
}

# Protocol commands

sub authenticate	{ $rpc->authenticate(@_); }
sub request		{ $rpc->request(@_); }

sub check {
	my $r = shift;
	if (!$r->{status}) {
		if ($r->{error}) {
			chomp(my $err = join("\n", $r->{error}));
			warn "$err\n";
		}
		die "\033[1;31mError: ".($r->{msg} // "unknown error")."\033[m\n";
	}
}

my $user = $ENV{USER};
my $debug = 0;
my $verbose = 0;

GetOptions(
	"D|debug!" => \$debug,
	"z|authz=s" => \$user,
	"v|verbose!" => \$verbose,
);

$rpc = Cluenet::Rpc::Client->new;
$rpc->{callbacks} = {
	# authorization id
	user => \$user,
};
$rpc->{verbose} = $verbose;
$rpc->{debug} = $debug;
if ($debug) { $ENV{DEBUG} = "1"; }

#$rpc->connect_spawn;
$rpc->connect_socket(getfqdn, 10875);

my $r;
my $cmd = shift(@ARGV) // "help";

given ($cmd) {
	when ("help") {
		say for (
			"Usage:",
			"",
			"request access [-]SERVICE",
			"\trequest access to a service (samba, ftp)",
			"",
			"request mysql",
			"\tcreate a MySQL account or reset an existing account's password",
			"",
			"request reset-password SERVICE",
			"\treset password for a service (mysql, samba)",
			"",
		);
	}
	when ("access") {
		my $service = shift(@ARGV);

		my $do_revoke = ($service =~ s/^-//);

		check $r = authenticate("GSSAPI");
		check $r = request(cmd => "grant_access",
					server => getfqdn(),
					service => $service,
					revoke => $do_revoke);

		given ($r->{action}) {
			when ("grant") {
				say "Access granted to ".join(", ", @{$r->{services}});
			}
			when ("revoke") {
				say "Access revoked to ".join(", ", @{$r->{services}});
			}
			when ("request-sent") {
				say "Request forwarded to administrators.";
			}
		}
	}
	when ("mysql") {
		my $user = $ENV{USER};

		confirm "Create MySQL account '\033[1m${user}\033[m'?";

		check $r = authenticate;
		check $r = request(cmd => "mysql_account");

		say "MySQL account updated.";
		say "";
		say "Username:\t".$r->{account}{username};
		say "Password:\t".$r->{account}{password};
		say "Databases:\t".$r->{account}{db_glob};
		say "";
		if ($r->{admin_url}) {
			say "You can change the password and create databases at:";
			say $r->{admin_url};
			say "";
		}
	}
	when ("reset-password") {
		my @services = qw(samba mysql);

		my $service = shift(@ARGV);
		if (!$service) {
			die "Service not specified\n";
		}
		unless ($service ~~ @services) {
			die "Unsupported service '$service'.\n";
		}

		confirm "Reset $service password for '\033[1m${user}\033[m'?";

		check $r = authenticate;
		check $r = request(cmd => "reset_password", service => $service);

		say "Password for '$r->{account}{username}' has been reset.";
		say "";
		say "New password:\t".$r->{account}{password};
		say "";
		if ($r->{msg}) {
			say $r->{msg};
			say "";
		}
	}
	when ("raw") {
		check $r = authenticate;
		say "Enter Perl hash:";
		while (<STDIN>) {
			my %args = eval $_;
			$r = request(%args);
			print Dumper($r);
		}
	}
	default {
		die "Unknown command.\n";
	}
}
