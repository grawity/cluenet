#!/usr/bin/env perl
use warnings;
use strict;
use feature "say";
use feature "switch";
use Cluenet::Common;
use Cluenet::Rpc;
use Cluenet::Rpc::Client;
use Data::Dumper;
use Getopt::Long qw(:config bundling no_ignore_case);

use constant {
	COMMAND_DIR	=> "/home/grawity/cluenet/cluerpc-client/*.pl",
};

my $rpc;

sub confirm {
	my $text = shift;
	print "$text [yn] ";
	exit unless <STDIN> =~ /^y/i;
}

sub authenticate	{ $rpc->authenticate(@_); }
sub request		{ $rpc->request(@_); }

sub check {
	my $r = shift;
	if (!$r->{status}) {
		if ($r->{error}) {
			chomp(my $err = join("\n", $r->{error}));
			warn "$err\n";
		}
		die "\033[1;31mError: ".($r->{msg} // "unknown error")."\033[m\n";
	}
}

my $user = $ENV{USER};
my $debug = 0;
my $verbose = 0;

GetOptions(
	"D|debug!" => \$debug,
	"z|authz=s" => \$user,
	"v|verbose!" => \$verbose,
);

$rpc = Cluenet::Rpc::Client->new;
$rpc->{callbacks} = {
	# authorization id
	user => \$user,
};
$rpc->{verbose} = $verbose;
$rpc->{debug} = $debug;
if ($debug) { $ENV{DEBUG} = "1"; }

$rpc->connect_socket(getfqdn, 10875);

my %commands;

for my $file (glob(COMMAND_DIR)) {
	my ($name, $command) = do $file;
	if ($@) {
		warn "Loading $file failed: $@\n";
	}
	$commands{$name} = $command;
}

my $r;
my $name = shift(@ARGV) // "help";

given ($name) {
	when ("help") {
		say "Usage:";
		say "";
		for my $name (sort keys %commands) {
			my $cmd = $commands{$name};
			if (defined $cmd->{usage}) {
				say "request $cmd->{usage}";
			} else {
				next;
			}

			if (defined $cmd->{description}) {
				say "\t$cmd->{description}";
			}

			say "";
		}
	}
	when ("raw") {
		check $r = authenticate;
		say "Enter Perl hash:";
		while (<STDIN>) {
			my %args = eval $_;
			$r = request(%args);
			print Dumper($r);
		}
	}
	when (defined $commands{$name}) {
		$commands{$name}{command}->($name, $rpc);
	}
	default {
		die "Unknown command.\n";
	}
}
