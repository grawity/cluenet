#!/usr/bin/env perl
BEGIN {
	push @INC, "$ENV{CLUENET}/lib/perl5"		if defined $ENV{CLUENET};
	push @INC, "$ENV{HOME}/cluenet/lib/perl5"	if -d "$ENV{HOME}/cluenet";
	push @INC, "/cluenet/lib/perl5"			if -d "/cluenet";
}

use utf8;
use feature qw(say switch state);
use warnings;
no if $] >= 5.017011, warnings => qw(experimental);
use strict;

use constant ERR_SYNTAX => 2;

use Cluenet::Common;
use Cluenet::LDAP;
use Cluenet::UI;
use Data::Dumper;
use Getopt::Long qw(:config posix_default no_ignore_case);
use Net::DNS;
use Net::IP;
use Net::LDAP;
use Net::LDAP::Constant;
use Net::LDAP::Extension::WhoAmI;
use Net::LDAP::Util qw(ldap_explode_dn);
use POSIX;
use POSIX::strptime;
use Text::Format;

my $term_w = int($ENV{COLUMNS} || qx(tput cols) || 80);

my $ldap;
my $cmd;
my $exit;
my $status = (-t 2) && !exists($ENV{CN_NO_STATUS});
my %commands;

use constant SHELL_SERVICES => qw(atd cron login passwd sshd su sudo);

$ENV{LDAPURI} = $Cluenet::LDAP_HOST;
$ENV{LDAPBASE} = $Cluenet::LDAP_BASE;

### LDAP functions

=head2 ldap_dumpsearch(%args)

Call $ldap->search and dump results to stdout in a table.

Accepts the same %args as $ldap->search, with an additional parameter "-raw" to output results in LDIF instead.

=cut

sub ldap_dumpsearch {
	my (%args) = @_;

	my $raw = $args{-raw} // 0;
	delete $args{-raw};

	$ldap //= ldap_connect_best();
	my $res = $ldap->search(%args);
	ldap_check($res, $args{base}) or return;
	if ($raw) {
		print $_->ldif for $res->entries;
	} else {
		$_->dump for $res->entries;
	}
}

=head2 ldap_find_next_uid() -> $uid

Determine the largest UID of accounts under ou=people, and return the next UID.

=cut

sub ldap_find_next_uid {
	my $next_uid = 25000;

	put_status("Searching for available UID...");
	my $res = $ldap->search(base => "ou=people,dc=cluenet,dc=org",
				filter => "objectClass=posixAccount",
				attrs => ["uidNumber"]);
	ldap_check($res, undef, die => 1);

	for my $entry ($res->entries) {
		my $uid = $entry->get_value("uidNumber");
		if ($uid > $next_uid) {
			$next_uid = $uid;
		}
	}
	
	++$next_uid;

	while (1) {
		put_status("Checking if UID $next_uid is free...");
		$res = $ldap->search(base => "dc=cluenet,dc=org",
				     filter => "(&(objectClass=posixAccount)(uidNumber=$next_uid))",
				     attrs => ["1.1"]);
		if ($res->is_error || $res->count == 0) {
			last;
		} else {
			++$next_uid;
		}
	}

	put_status();
	return $next_uid;
}

=head2 ldap_dn_comparable($dn) -> $exists

Check if a LDAP entry with DN $dn exists.

=cut

sub ldap_dn_searchable {
	my ($dn) = @_;

	my $res = $ldap->search(base => $dn,
				scope => "base",
				filter => "objectClass=*",
				attrs => ["1.1"]);

	ldap_check($res, $dn, ignore => "LDAP_NO_SUCH_OBJECT", die => 1);

	return !($res->is_error || $res->count == 0);
}

sub ldap_dn_comparable {
	my ($dn) = @_;

	my $dnparts = ldap_explode_dn($dn) // return 0;

	while (my ($attr, $value) = each %{$dnparts->[0]}) {
		my $res = $ldap->compare($dn, attr => $attr, value => $value);
		if ($res->code == Net::LDAP::Constant::LDAP_NO_SUCH_OBJECT
		|| $res->code == Net::LDAP::Constant::LDAP_COMPARE_FALSE) {
			return 0;
		} else {
			ldap_check($res, $dn, die => 1);
		}
	}

	return 1;
}

=head2 krb_principal_exists($principal) -> $exists;

Check if a Kerberos principal $principal exists.

=cut

sub krb_principal_exists {
	my ($principal) = @_;

	my ($realm) = $principal =~ /@(.+)$/;

	ldap_dn_comparable("krbPrincipalName=$principal,cn=$realm,cn=kerberos,dc=cluenet,dc=org");
}

=head2 ldap_whoami() -> $username

Call $ldap->who_am_i, extract the username, and cache results for future calls.

=cut

sub ldap_whoami {
	state $resp;
	if (!defined $resp) {
		$resp = $ldap->who_am_i->response;
		$resp =~ s/^u://;
		$resp =~ s/^dn:uid=(.+?),.*$/$1/;
		$resp =~ s|/admin$||;
	}
	return $resp;
}

# TODO: localify $err to a closure

my $err = 0;

=head2 ldap_exit()

Exit with success or failure depending on previous LDAP errors.

=cut

sub ldap_exit {
	exit $err ? 1 : 0;
}

=head2 ldap_check($msg, $dn?, %args) -> $success

Check if a LDAP response was successful. Print a warning to stderr on failure;
exit if $args{die} was set. Silently skip error names in %$args{ignore}.

=cut

sub ldap_check {
	my ($res, $dn, %args) = @_;

	if ($res->is_error) {
		if ($args{ignore} && $res->error_name ~~ $args{ignore}) {
			return 1;
		} else {
			put_status();
			my $msg = Cluenet::LDAP::ldap_format_error($res, $dn);
			print STDERR "\e[33m${msg}\e[m";

			++$err;
			if ($args{die}) {
				ldap_exit;
			} else {
				return 0;
			}
		}
	} else {
		return 1;
	}
}

### String and hostname manipulation

sub lookup_host {
	my ($host) = @_;
	my @addrs = ();
	my $r = Net::DNS::Resolver->new;

	my $query = $r->query($host, "A");
	if ($query) { push @addrs, $_->address for $query->answer }

	$query = $r->query($host, "AAAA");
	if ($query) { push @addrs, $_->address for $query->answer }

	return @addrs;
}

sub format_date {
	my ($sz) = @_;
	($sz) = @$sz;
	my (@tm) = POSIX::strptime($sz, "%Y%m%d%H%M%SZ");
	return POSIX::strftime("%Y-%m-%d", @tm);
	# TODO: relative date
}

sub format_name {
	my ($user) = @_;
	my $name = $user->{uid};
	if (defined $user->{cn}) {
		if ($user->{cn} ne $user->{uid}) {
			$name .= " (".$user->{cn}.")";
		}
	}
	elsif (defined $user->{gecos}) {
		my ($gecos) = split(/,/, $user->{gecos});
		if ($gecos ne $user->{uid}) {
			$name .= " (".$gecos.")";
		}
	}
	return $name;
}

sub format_address {
	my ($host, $port) = @_;
	if (ref $port eq 'ARRAY') {
		$port = @$port > 1
			? "{".join(",", @$port)."}"
			: $port->[0];
	}
	if ($host =~ /:/) {
		$host = Net::IP::ip_compress_address($host, 6);
		return "[$host]:$port";
	} else {
		return "$host:$port";
	}
}

sub parse_bool {
	given (shift) {
		return 1 if !defined $_;
		return 1 if /^(1|y|yes|true)$/i;
		return 0 if /^(0|n|no|false)$/i;
		die "Invalid value '$_'\n";
	}
}

sub ldap_fmt_bool {
	return parse_bool(shift) ? "TRUE" : "FALSE";
}

# Output fields

my $_rows = 0;

sub put_row {
	my ($label, $value) = @_;
	if (ref $value eq 'ARRAY') {
		put_row($label, $_) for sort @$value;
		return;
	}
	if (!defined $value) {
		$value = '(nil)';
	}
	my @rowvalue = ();
	my $rowlength = 0;
	my $label_w = 19;
	for my $item (split /\s+/, $value) {
		if ($rowlength + length($item) > ($term_w-$label_w-2)) {
			printf "%-*s%s\n", $label_w, $label, join(" ", @rowvalue);
			++$_rows;
			$label = "";
			@rowvalue = ();
			$rowlength = 0;
		}
		push @rowvalue, $item;
		$rowlength += length($item) + 1;
	}
	if (@rowvalue) {
		printf "%-*s%s\n", $label_w, $label, join(" ", @rowvalue);
		++$_rows;
	}
}

sub put_end_section {
	if ($_rows) { print "\n"; $_rows = 0; }
}

### LDAP connection

sub krb5_have_tgt {
	return system("klist", "-s", "-5") == 0;
}

sub krb5_ensure_tgt {
	if (!krb5_have_tgt()) {
		put_status();
		if (defined $ENV{CN_NUSH}) {
			die "\e[1;31merror:\e[m not logged in\n";
		} else {
			die "Kerberos ticket needed, please run 'kinit'.\n";
		}
	}
}

sub ldap_connect_auth {
	Cluenet::LDAP::ldap_connect(auth => 1);
}

sub ldap_connect_anon {
	Cluenet::LDAP::ldap_connect(auth => 0);
}

sub ldap_connect_best {
	krb5_have_tgt() ? ldap_connect_auth : ldap_connect_anon;
}

sub get_server_info {
	state %cache;
	my ($host) = @_;
	my $dn = host_to_dn($host);
	if (!exists $cache{$dn}) {
		put_status("Looking up server: ".host_from_dn($dn));
		my $res = $ldap->search(base => $dn,
					scope => "base",
					filter => q(objectClass=server),
					attrs => ["*", "+"]);
		ldap_check($res, $dn)
			or return $cache{$dn} = undef;
		for my $entry ($res->entries) {
			my %server = map {$_ => [$entry->get_value($_)]}
					$entry->attributes;
			for (qw(cn owner)) {
				$server{$_} = $server{$_}->[0];
			}
			for (qw(isActive isOfficial userAccessible)) {
				$server{$_} = $server{$_}
						? $server{$_}->[0] eq "TRUE"
						: 0;
			}
			$server{address} = [lookup_host($server{cn})];
			$cache{$dn} = \%server;
			last;
		}
		put_status();
	}
	return $cache{$dn};
}

sub get_user_realname {
	my ($user) = @_;

	my $uid = user_from_dn($user);
	if ($uid =~ /@/) {
		return "\"$uid\" [foreign]";
	}

	my $i = get_user_info($user);
	if ($i) {
		return format_name($i);
	} else {
		return "\"$uid\" [missing]";
	}
}

sub print_server_info {
	my ($host) = @_;

	my $server = get_server_info($host);
	my $owner = get_user_info($server->{owner});

	my @admins = sort map {get_user_realname($_)}
			grep {!m|/|} @{$server->{admin}};

	my $port = $server->{sshPort} // 22;

	my @status = grep {defined} (
				$server->{isOfficial}     ? "official" : "unofficial",
				$server->{userAccessible} ? "public"   : "private",
				$server->{isActive}       ? "active"   : "inactive",
				(grep {/:/} @{$server->{address}}) ? "IPv6" : undef,
			);

	put_row "HOSTNAME:"		=> uc $server->{cn};
	put_row "created:"		=> format_date($server->{createTimestamp});
	put_row "address:"		=> format_address($_, $port)
					for @{$server->{address}};
	put_row "owner:"		=> format_name($owner);
	put_row "admin:"		=> \@admins;
	put_row "status:"		=> join(", ", @status);
	if (defined $server->{authorizedService}) {
		my @services = sort @{$server->{authorizedService}};
		put_row "services:"	=> join(", ", @services);
	}
	put_end_section;

	my $fmt = Text::Format->new(leftMargin => 4, firstIndent => 0);

	if ($server->{description}) {
		print "description:\n";
		print $fmt->format(@{$server->{description}}), "\n";
	}

	if ($server->{serverRules}) {
		print "rules:\n";
		if ($server->{serverRules}[0] ne 'default') {
			print $fmt->format(@{$server->{serverRules}}), "\n";
		}
	}
}

sub get_user_info {
	state %cache;
	my ($dn) = @_;
	if (!exists $cache{$dn}) {
		put_status("Looking up user: ".user_from_dn($dn));
		my $res = $ldap->search(base => $dn,
					scope => "base",
					filter => q(objectClass=posixAccount),
					attrs => ["*", "+"]);
		ldap_check($res, $dn)
			or return $cache{$dn} = undef;
		for my $entry ($res->entries) {
			my %user = map {$_ => [$entry->get_value($_)]} $entry->attributes;
			for (qw(uid uidNumber gidNumber gecos homeDirectory loginShell cn)) {
				$user{$_} = $user{$_}->[0];
			}
			$user{cn} =~ s/^\s+|\s+$//g;
			$cache{$dn} = \%user;
			last;
		}
		put_status();
	}
	return $cache{$dn};
}

sub print_user_info {
	my ($user) = @_;
	put_row "PERSON:"		=> format_name($user);
	put_row "created:"		=> format_date($user->{createTimestamp});
	put_row "uid:"			=> $user->{uidNumber};
	put_row "shell:"		=> $user->{loginShell} // "(unset)";
	put_row "IRC account:"		=> $user->{ircServicesUser}
					if $user->{ircServicesUser};
	put_row "email:"		=> join(", ", @{$user->{mail}})
					if $user->{mail};
	put_row "URL:"			=> $user->{labeledURI}
					if $user->{labeledURI};
	put_row "allowed services:"	=> join(", ", sort @{$user->{authorizedService}})
					if $user->{authorizedService};
	put_row "allowed hosts:"	=> join(",  ", sort @{$user->{host}})
					if $user->{host};
	put_end_section;
}


# apply a LDAP modify operation to several objects

sub modify_objects {
	my ($changes, @objects) = @_;

	my $ldap = ldap_connect_auth;
	for my $dn (@objects) {
		say "Modifying $dn";
		my $res = $ldap->modify($dn, %$changes);
		ldap_check($res, $dn);
	}
}

### Miscellaneous

sub usage {
	print STDERR "Usage: @_\n";
	exit 2;
}

### User interface commands

sub mgmt_access_get_users {
	my ($ldap, $host, $service) = @_;
	my $dn = hostacl_to_dn($host, $service);
	my $res = $ldap->search(base => $dn,
				scope => "base",
				filter => q(objectClass=*),
				attrs => ["member"]);
	ldap_check($res, $dn) or return;
	my @users;
	for my $entry ($res->entries) {
		@users = map {user_from_dn $_} $entry->get_value("member");
	}
	return @users;
}

sub mgmt_access_modify {
	my ($ldap, $host, $service, %args) = @_;
	my $dn = hostacl_to_dn($host, $service);
	my $addusers = $args{add} // [];
	my $delusers = $args{delete} // [];
	my %changes = ();
	if (@$addusers) {
		$changes{add} = {member => [map {user_to_dn($_)} @$addusers]};
	}
	if (@$delusers) {
		$changes{delete} = {member => [map {user_to_dn($_)} @$delusers]};
	}
	if (%changes) {
		my $res = $ldap->modify($dn, %changes);
		ldap_check($res, $dn);
	}
	return 1;
}

$commands{"access"} = sub {
	my (@services, @users, @add, @del);

	for (@_) {
		when (m!^\+(.+)$!) { push @add, $1; }
		when (m!^-(.+)$!)  { push @del, $1; }
		when (m!^=(.+)$!)  { push @users, $1; }
		when (m!/!) {
			my ($h, $s) = parse_hostservice_safe($_);
			if ($s eq 'shell') {
				push @services, [$h, $_] for SHELL_SERVICES;
			} else {
				push @services, [$h, $s];
			}
		}
		default {
			push @users, $_;
		}
	}

	if ((@add or @del) and @users) {
		warn "Error: Cannot mix 'modify' ([+-]<user>) and 'search' (<user>) args\n";
		exit ERR_SYNTAX;
	}
	elsif (@add or @del) {
		$ldap = ldap_connect_auth;
		for (@services) {
			my ($host, $service) = @$_;
			my @users = mgmt_access_get_users($ldap, $host, $service);
			my @add_svc = grep {not $_ ~~ @users} @add;
			my @del_svc = grep {$_ ~~ @users} @del;
			if (@add_svc or @del_svc) {
				say "$host/$service ".join(" ",
					(map {"+$_"} @add_svc),
					(map {"-$_"} @del_svc));
				mgmt_access_modify($ldap, $host, $service,
					add => \@add_svc, delete => \@del_svc);
			} else {
				say "$host/$service: nothing to do";
			}
		}
	}
	elsif (@users) {
		$ldap = ldap_connect_anon;
		my @filters = map {"(member=$_)"} map {user_to_dn($_)} @users;
		my $filter = "(&(objectClass=groupOfNames)(|".join("", @filters)."))";
		my @results;
		if (@services) {
			for (@services) {
				my ($host, $service) = @$_;
				my $base;
				if ($service eq "all") {
					$base = host_to_dn($host);
				} else {
					$base = hostacl_to_dn($host, $service);
				}
				put_status("Searching in ACL: $host/$service");
				my $res = $ldap->search(base => $base,
							scope => "sub",
							filter => $filter,
							attrs => ["cn", "member"]);
				ldap_check($res, $base) or next;
				push @results, $res->entries;
			}
			put_status();
		} else {
			my $base = "ou=servers,dc=cluenet,dc=org";
			put_status("Searching in all server ACLs...");
			my $res = $ldap->search(base => $base,
						scope => "sub",
						filter => $filter,
						attrs => ["cn", "member"]);
			ldap_check($res, $base) or next;
			push @results, $res->entries;
			put_status();
		}

		my @output;
		for my $entry (@results) {
			my $host = host_from_dn($entry->dn);
			my $service = ($entry->get_value("cn"))[0];
			push @output,
				map {{host => $host, service => $service, user => $_}}
				grep {$_ ~~ @users}
				map {user_from_dn($_)}
				$entry->get_value("member");
		}

		printf("%-30s\t%s\n", $_->{host}."/".$_->{service}, $_->{user})
			for sort {$a->{user} cmp $b->{user}}
			    sort {$a->{host} cmp $b->{host}}
			    sort {$a->{service} cmp $b->{service}} @output;

	}
	elsif (@services) {
		$ldap = ldap_connect_anon;
		for (@services) {
			my ($host, $service) = @$_;
			my @users = mgmt_access_get_users($ldap, $host, $service);
			print "$host/$service\t$_\n" for sort @users;
		}
	}
	else {
		usage("access <host/service>... [+-]<user>...") unless @services;
	}
};

$commands{"acl"} = sub {
	usage("acl <host>... [+-]<service>...") unless @_;

	my (@hosts, @add, @del);

	for (@_) {
		when (m!^\+(.+)$!) {
			push @add, $1 eq 'shell' ? SHELL_SERVICES : $1;
		}
		when (m!^-(.+)$!) {
			push @del, $1 eq 'shell' ? SHELL_SERVICES : $1;
		}
		default {
			push @hosts, $_;
		}
	}

	if (@add or @del) {
		$ldap = ldap_connect_auth;
		for my $host (@hosts) {
			my ($res, $dn, %entry);

			$dn = "cn=svcAccess,".host_to_dn($host);
			$res = $ldap->search(base => $dn,
					     scope => "base",
					     filter => q(objectClass=*),
					     attrs => []);
			if (!$res->count) {
				print "Creating ACL subtree for $host\n";
				%entry = (
					objectClass => "groupOfGroups",
				);
				$res = $ldap->add($dn, attr => [%entry]);
				ldap_check($res, $dn);
			}

			for my $service (@add) {
				my ($res, $dn, %entry);

				print "Creating ACL: $host/$service\n";

				$dn = hostacl_to_dn($host, $service);
				%entry = (
					objectClass => "groupOfNames",
					member => user_to_dn(ldap_whoami),
				);
				$res = $ldap->add($dn, attr => [%entry]);
				ldap_check($res, $dn);

				$dn = host_to_dn($host);
				%entry = (
					authorizedService => $service,
				);
				$res = $ldap->modify($dn, add => \%entry);
				ldap_check($res, $dn);
			}

			for my $service (@del) {
				my ($dn, $res, %entry);

				print "Deleting ACL: $host/$service\n";
				$dn = "cn=$service,cn=svcAccess,".host_to_dn($host);
				$res = $ldap->delete($dn);
				ldap_check($res, $dn, ignore => "LDAP_NO_SUCH_OBJECT");

				$dn = host_to_dn($host);
				%entry = (
					authorizedService => $service,
				);
				$res = $ldap->modify($dn, delete => \%entry);
				ldap_check($res, $dn, ignore => "LDAP_NO_SUCH_ATTRIBUTE");
			}
		}
	}
	else {
		$ldap = ldap_connect_anon;
		for my $host (@hosts) {
			my ($dn, $res);

			$dn = host_to_dn($host);
			$res = $ldap->search(base => $dn,
					     scope => "base",
					     filter => q(objectClass=*),
					     attrs => ["authorizedService"]);
			ldap_check($res, $dn);

			my @svcs_authz = map {$_->get_value("authorizedService")} $res->entries;
			my %svcs_authz = map {$_ => 1} @svcs_authz;

			$dn = "cn=svcAccess,".host_to_dn($host);
			$res = $ldap->search(base => $dn,
					     scope => "one",
					     filter => q(objectClass=groupOfNames),
					     attrs => ["cn"]);
			ldap_check($res, $dn);

			my @svcs_acl = map {$_->get_value("cn")} $res->entries;
			my %svcs_acl = map {$_ => 1} @svcs_acl;

			# print the union of all found services

			my %services = map {$_ => 1} (@svcs_acl, @svcs_authz);
			for my $svc (sort keys %services) {
				if (@svcs_authz and !($svc ~~ %svcs_authz)) {
					warn "Warning: service '$svc' not listed as authorizedService\n";
				}
				if (@svcs_acl and !($svc ~~ %svcs_acl)) {
					warn "Warning: service '$svc' does not have an ACL\n";
				}
				print "$host/$svc\n";
			}
		}
	}

	return $err;
};

$commands{"server"} = sub {
	my (@hosts, @changes);

	for (@_) {
		when (/=/ or /^-/) {
			push @changes, $_;
		}
		default {
			push @hosts, $_;
		}
	}

	if (!@hosts) {
		$ldap = ldap_connect_anon;

		my $base = "ou=servers,dc=cluenet,dc=org";
		my $res = $ldap->search(base => $base,
					scope => "one",
					filter => q(objectClass=server),
					attrs => ["cn"]);
		ldap_check($res, $base);

		my @hosts = sort grep {s/\.cluenet\.org$//i}
					map {($_->get_value("cn"))[0]}
					$res->entries;

		say for @hosts;
	}
	elsif (@changes) {
		my $changes = parse_changelist(\@changes,
			translate => sub {
				my ($attr, $value) = @_;
				if ($attr eq "active") {
					$attr = "isActive";
					$value = ldap_fmt_bool($value);
				}
				elsif ($attr eq "official") {
					$attr = "isOfficial";
					$value = ldap_fmt_bool($value);
				}
				elsif ($attr eq "public") {
					$attr = "userAccessible";
					$value = ldap_fmt_bool($value);
				}
				elsif ($attr eq "admin" || $attr eq "owner") {
					$value = user_to_dn_maybe($value);
				}
				return ($attr, $value);
			});
		return ERR_SYNTAX if !$changes;
		modify_objects($changes, map {host_to_dn($_)} @hosts);
		ldap_exit;
	}
	else {
		$ldap = ldap_connect_best;
		print_server_info($_) for @hosts;
	}
};

$commands{"server:dump"} = sub {
	my $raw = 0;

	Getopt::Long::GetOptionsFromArray(\@_,
		"r|raw" => \$raw);

	ldap_dumpsearch(base => host_to_dn($_),
			scope => "base",
			filter => q(objectClass=*),
			-raw => $raw) for @_;

	return 0;
};

$commands{"server:admin"} = sub {
	my (@hosts, @add, @del);

	my $show_princ = 0;

	Getopt::Long::GetOptionsFromArray(\@_,
		"p|principal" => \$show_princ);

	for (@_) {
		when (/^\+(.+)$/)	{ push @add, user_from_dn($1) }
		when (/^-(.+)$/)	{ push @del, user_from_dn($1) }
		default			{ push @hosts, $_ }
	}

	usage("server:admin <host>... [+-]<user>...") if !@hosts;

	if (@add or @del) {
		# update admins
		$ldap = ldap_connect_auth;
		for my $host (@hosts) {
			my $dn = host_to_dn($host);
			my $res = $ldap->search(base => $dn,
						scope => "base",
						filter => q(objectClass=server),
						attrs => ["admin", "owner"]);
			ldap_check($res, $dn) or next;

			my ($owner, @admins, %changes);
			for my $entry ($res->entries) {
				$owner = user_from_dn($entry->get_value("owner"));
				@admins = map {user_from_dn($_)} $entry->get_value("admin");
			}

			if ($owner ~~ @del and !($owner ~~ @admins)) {
				warn "$host: Cannot remove server owner $owner\n";
			}

			my @add_host = grep {not $_ ~~ @admins} @add;
			my @del_host = grep {$_ ~~ @admins} @del;

			if ($owner ~~ @add_host) {
				warn "$host: Adding server owner $owner as an admin\n";
			}

			if (@add_host) {
				$changes{add} = {
					admin => [map {user_to_dn $_} @add_host],
				};
				print "$host: Adding ".join(", ", @add_host)."\n";
			}
			if (@del_host) {
				$changes{delete} = {
					admin => [map {user_to_dn $_} @del_host],
				};
				print "$host: Removing ".join(", ", @del_host)."\n";
			}

			if (@add_host or @del_host) {
				my $res = $ldap->modify($dn, %changes);
				ldap_check($res, $dn);
			} else {
				print "$host: Nothing to do\n";
			}
		}
	} else {
		# list admins
		$ldap = ldap_connect_best;
		for my $host (@hosts) {
			my $dn = host_to_dn($host);
			my $res = $ldap->search(base => $dn,
						scope => "base",
						filter => q(objectClass=server),
						attrs => ["admin", "owner"]);
			ldap_check($res, $dn) or next;

			for my $entry ($res->entries) {
				my $owner = $entry->get_value("owner");
				my @admins = $entry->get_value("admin");

				$owner = user_from_dn($owner);
				@admins = sort map {user_from_dn($_)} @admins;

				if ($show_princ) {
					$owner =~ s/$/\@CLUENET.ORG/;
					@admins =
						grep {/@/ or s/$/\@CLUENET.ORG/}
						grep {s/(@)(.+)/$1.uc($2)/e or 1}
						@admins;
				}

				my $fmt = "%-15s\t%s\n";
				printf $fmt, $host, $owner.' (owner)';
				printf $fmt, $host, $_ for @admins;
			}
		}
	}
};

$commands{"server:create"} = sub {
	my ($owner, @address);
	my ($res, %entry);

	Getopt::Long::GetOptionsFromArray(\@_,
		"o|owner=s" => \$owner,
		"a|address=s" => \@address);

	my $host = shift;

	usage("server:create <hostname>") if !$host;

	$ldap = ldap_connect_auth;

	$owner //= ldap_whoami;
	@address || push @address, "0.0.0.0";

	my $fqdn = host_to_fqdn($host);
	print "Creating server: $fqdn (owned by $owner)\n";

	# Add main server entry

	my $dn = host_to_dn($host);
	%entry = (
		objectClass => ["server",
				"ipHost",
				"authorizedServiceObject",
				"serviceRequirementObject"],
		cn => $fqdn,
		owner => user_to_dn($owner),
		isActive => "TRUE",
		isOfficial => "FALSE",
		userAccessible => "TRUE",
		authorizedService => [SHELL_SERVICES],
		ipHostNumber => \@address,
	);
	print "+ $dn\n";
	$res = $ldap->add($dn, attr => [%entry]);
	ldap_check($res, $dn);

	# Add svcAccess subtree

	my $subdn = "cn=svcAccess,$dn";
	%entry = (
		objectClass => ["groupOfGroups"],
		cn => "svcAccess",
	);
	print "+ $subdn\n";
	$res = $ldap->add($subdn, attr => [%entry]);
	ldap_check($res, $subdn);

	# add service groups
	for (SHELL_SERVICES) {
		$subdn = "cn=$_,cn=svcAccess,$dn";
		%entry = (
			objectClass => ["groupOfNames"],
			cn => $_,
			member => user_to_dn($owner),
		);
		print "+ $subdn\n";
		$res = $ldap->add($subdn, attr => [%entry]);
		ldap_check($res, $subdn);
	}

	return $err;
};

$commands{"server:delete"} = sub {
	my ($res);

	usage("server:delete <hostname>...") if !@_;

	$ldap = ldap_connect_auth;

	for my $host (@_) {
		my $fqdn = host_to_fqdn($host);
		print "Deleting server: $fqdn\n";

		my $dn = host_to_dn($fqdn);
		$res = $ldap->search(base => $dn,
				     scope => "sub",
				     filter => q(objectClass=*),
				     attributes => ["dn"]);
		$res->is_error and die ldap_errmsg($res, $dn);

		my @children = reverse map {$_->dn} $res->entries;
		for my $subdn (@children) {
			print "- $subdn\n";
			$res = $ldap->delete($subdn);
			ldap_check($res, $subdn);
		}
	}

	return $err;
};

$commands{"user"} = sub {
	my (@users, @changes);

	for (@_) {
		when (/=/ or /^-/) { push @changes, $_; }
		default            { push @users, $_; }
	}

	if (!@users) {
		$ldap = ldap_connect_anon;

		my $base = "ou=people,dc=cluenet,dc=org";
		my $res = $ldap->search(base => $base,
					scope => "one",
					filter => q(objectClass=posixAccount),
					attrs => ["uid"]);
		ldap_check($res, $base);

		my @users = sort map {($_->get_value("uid"))[0]} $res->entries;
		say for @users;
	}
	elsif (@changes) {
		my $changes = parse_changelist(\@changes);
		return ERR_SYNTAX if !$changes;
		modify_objects($changes, map {user_to_dn($_)} @users);
		ldap_exit;
	}
	else {
		$ldap = ldap_connect_best;
		print_user_info(get_user_info($_))
			for map {user_to_dn($_)} @users;
	}

	return 0;
};

$commands{"user:dump"} = sub {
	my $raw = 0;

	Getopt::Long::GetOptionsFromArray(\@_,
		"r|raw" => \$raw);

	ldap_dumpsearch(base => user_to_dn($_),
			scope => "base",
			filter => q(objectClass=*),
			-raw => $raw) for @_;

	return 0;
};

$commands{"user:create"} = sub {
	require Cluenet::Kadmin;

	my ($force, $uid);
	my ($res, %entry);
	my ($skip_krb, $skip_ldap);

	Getopt::Long::GetOptionsFromArray(\@_,
		"force!" => \$force,
		"uid=i" => \$uid);

	my $username = shift;

	usage("user:create <username>") if !$username;

	$ldap = ldap_connect_auth;

	# Gather information

	my $dn = user_to_dn($username);
	my $principal = "$username\@CLUENET.ORG";

	if (ldap_dn_searchable($dn)) {
		put_failure("Entry $dn already exists.", !$force)
		|| return 1;
		$skip_ldap = 1;
	}

	if ($uid) {
		$res = $ldap->search(base => "dc=cluenet,dc=org",
				     filter => "(&(objectClass=posixAccount)(uidNumber=$uid))",
				     attrs => ["1.1"]);
		ldap_check($res, undef, die => 1);
		if ($res->count > 0) {
			put_failure("User with UID $uid already exists.", !$force)
			|| return 1;
			$skip_ldap = 1;
		}
	}

	if (krb_principal_exists($principal)) {
		put_failure("Kerberos principal $principal already exists.", !$force)
		|| return 1;
		$skip_krb = 1;
	}

	# Add main user entry

	my $next_uid = $uid // ldap_find_next_uid();

	%entry = (
		objectClass => ["person",
				"inetOrgPerson",
				"posixAccount",
				"hostObject",
				"authorizedServiceObject",
				"cluenetUser",
				"krbPrincipalAux",
				"clueAuthorizedAbilityObject"],
		uid => $username,
		uidNumber => $next_uid,
		gidNumber => 25000,
		userPassword => "{SASL}$principal",
		sn => $username,
		givenName => $username,
		cn => $username,
		gecos => $username,
		loginShell => "/bin/bash",
		homeDirectory => "/home/$username",
		krbPrincipalName => $principal,
		authorizedService => ["wiki"],
	);

	if ($skip_ldap) {
		print "- $dn (skipped)\n";
	} else {
		print "+ $dn\n";
		$res = $ldap->add($dn, attr => [%entry]);
		ldap_check($res, $dn);
	}

	# Add Kerberos principal

	my $password = gen_passwd();

	if ($skip_krb) {
		print "- principal: $principal (skipped)\n";
	} else {
		put_status("Connecting to kadmin server...");
		my $kadm = Cluenet::Kadmin::kadm_connect_auth();
		put_status("Creating Kerberos principal...");
		Cluenet::Kadmin::kadm_create_principal($kadm, $principal, $password);
		put_status();
		print "+ principal: $principal\n";
	}

	print "User account created.\n";
	print "; username: $username\n";
	print "; password: $password\n";

	return 0;
};

$commands{"user:chsh"} = sub {
	my $shell = shift;

	if ($shell && $shell eq "-s") {
		$shell = shift;
	}

	if (defined $shell) {
		if (!$shell) {
			die "Error: shell not specified\n";
		} elsif ($shell !~ m!^/.+!) {
			die "Error: shell must be an absolute filesystem path\n";
		} elsif ($shell !~ m!^/bin/(ba)?sh$!) {
			warn "Warning: $shell might not be available on other servers\n";
		}

		$ldap = ldap_connect_auth;
		my $dn = user_to_dn(ldap_whoami);
		my %entry = (loginShell => $shell);

		say "Changing shell for ".ldap_whoami." to $shell";
		my $res = $ldap->modify($dn, replace => \%entry);
		ldap_check($res, $dn, die => 1);
	}
	else {
		$ldap = ldap_connect_auth;
		my $dn = user_to_dn(ldap_whoami);
		my $res = $ldap->search(base => $dn,
					scope => "base",
					filter => q(objectClass=posixAccount));
		ldap_check($res, $dn, die => 1);

		for my $entry ($res->entries) {
			$shell = $entry->get_value("loginShell");
		}
		$shell //= "not set.";

		say "Your current shell is $shell";
	}

	return 0;
};

$commands{"whoami"} = sub {
	my $verbose = 0;

	Getopt::Long::GetOptionsFromArray(\@_,
		"v|verbose" => \$verbose);

	my ($dn, $uid, $kuid, $princ);

	$ldap = ldap_connect_auth;
	my $resp = $ldap->who_am_i->response;

	given ($resp) {
		when (/^dn:(uid=(.+),ou=people,dc=cluenet,dc=org)$/) {
			$dn = $1;
			$kuid = $2;
		}
		when (/^dn:(uid=(.+),ou=people,dc=nullroute,dc=eu,dc=org)$/) {
			$dn = $1;
			$kuid = $2.'@nullroute.eu.org';
		}
		when (/^u:(.+)$/) {
			$dn = user_to_dn($1);
			$kuid = $1;
		}
		default {
			die "Error: Unknown response $resp from LDAP WhoAmI";
		}
	}

	$uid = $kuid;
	$uid =~ s|(/.+)*$||;

	given ($uid) {
		when (/^(.+)@(.+?)$/) {
			my $query = Net::DNS::Resolver->new->query("_kerberos.$2", "TXT");
			if ($query) {
				my $realm = (($query->answer)[0]->char_str_list)[0];
				say "Foreign user \"$1\" from realm $realm" if !$verbose;
				$princ = "$1\@$realm";
			}
			else {
				say "Foreign user \"$1\" from $2" if !$verbose;
				$princ = "$1\@$2";
			}
		}
		default {
			say "Cluenet user \"$uid\"" if !$verbose;
			$princ = "$kuid\@CLUENET.ORG";
		}
	}

	if ($verbose) {
		say "User:         $uid";
		say "LDAP authzid: $resp";
		say "LDAP DN:      $dn";
		say "Kerberos:     $princ";
	} else {
		say "dn: $dn";
	}

	return 0;
};

$commands{"help"} = sub {
	# suck it, iso8859
	print qq¶Usage: cluenet <command>

ACCESS LISTS
    show:       access <host/service>...
    grant:      access <host/service>... [+-]<user>...
    list:       acl <host>...
    create:     acl <host>... [+-]<service>...

USER ACCOUNTS
    view:       user <user>...
    modify:     user <user>... <attr>{=,+=,-=}<value>...
    shell:      user:chsh <shell>

SERVERS
    show:       server [<host>...]
    modify:     server <host>... <attr>{=,+=,-=}<value>...
    admins:     server:admin <host>... [[+-]<user>...]
    create:     server:create <host> [--owner <owner>]

MISCELLANEOUS
    whoami
¶;

	return 0;
};

### Main code

$cmd = shift(@ARGV) // "help";

if (defined $commands{$cmd}) {
	$exit = $commands{$cmd}->(@ARGV);
	$ldap and $ldap->unbind;
	exit (defined $exit && $exit) ? 1 : 0;
} else {
	die "Unknown command '$cmd'\n";
}
