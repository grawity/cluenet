#!/usr/bin/env perl
BEGIN {
	push @INC, "/cluenet/lib/perl5",
		($ENV{CLUENET} // "$ENV{HOME}/cluenet")."/lib/perl5";
}
use feature qw(say);
use Cluenet::LDAP;
use English;
use Getopt::Long qw(:config no_ignore_case);

my $users = getlogin;
my $short = 0;

GetOptions(
	'u|users=s'	=> \$users,
	's|short!'	=> \$short,
) or exit 2;

my @users = split(/,/, $users);
my @attrs = @ARGV;

my $err = 0;

my $cachedir = "/var/cache/cluenet/user-info";

sub getattrs {
	my ($uid, $attrs) = @_;
}

for my $uid (@users) {
	my @items;
	my $cachefile = "$cachedir/$uid";
	if (-r $cachefile && -M $cachefile < 1) {
		open(my $fh, "<", $cachefile);
		while (<$fh>) {
			chomp;
			my ($u, $k, $v) = split(/\t/, $_, 3);
			if ($u eq $uid && $k ~~ @attrs) {
				push @items, [$k, $v];
			}
		}
		close($fh);
	} else {
		my $dn = user_dn($uid);
		my $ldap = Cluenet::LDAP::ldap_connect_anon;
		my $res = $ldap->search(
			base => $dn,
			scope => "base",
			filter => q(objectClass=posixAccount));
		if ($res->is_error) {
			$err++;
			next;
		}
		for my $entry ($res->entries) {
			if (-d $cachedir) {
				open(my $fh, ">", $cachefile);
				for my $attr ($entry->attributes) {
					say $fh join("\t", $uid, $attr, $_)
						for $entry->get_value($attr);
				}
				close($fh);
			}
			for my $attr (@attrs) {
				push @items, [$attr, $_] for $entry->get_value($attr);
			}
		}
	}

	if ($short) {
		say $_->[1] for @items;
	} else {
		say join("\t", $uid, @$_) for @items;
	}
}

exit $err ? 1 : 0;
