#!/usr/bin/env perl
use warnings;
use strict;
use feature "say";
use feature "switch";
use Cluenet::Common;
use Cluenet::Rpc;
use Cluenet::Rpc::Client;
use Data::Dumper;
use File::Basename;
use Getopt::Long qw(:config bundling no_ignore_case require_order);

use constant COMMAND_DIR => Cluenet::Common::BASEDIR."/lib/cluerpc/*.pl";

my %commands;
my $debug;
my $host;
my $port;
my $rpc;
our $user;
my $verbose;
my $yes;
my @USAGE;

sub APPNAME { basename($0) }

sub joins {
	join(" ", grep {defined} @_);
}

sub confirm {
	unless ($yes) {
		my $text = shift;
		print "$text [yn] ";
		exit unless <STDIN> =~ /^y/i;
	}
}

sub authenticate	{ $rpc->authenticate(@_); }
sub request		{ $rpc->request(@_); }

$user = getlogin;
$host = undef;
$port = undef;
$debug = $ENV{DEBUG} || 0;

GetOptions(
	"D|debug!"	=> \$debug,
	"h|host=s"	=> \$host,
	"v|verbose!"	=> \$verbose,
	"y|yes!"	=> \$yes,
	"z|authz=s"	=> \$user,
) or exit(2);

# load available commands

for my $file (glob(COMMAND_DIR)) {
	if ($debug) {
		warn "Loading $file...\n";
	}
	my ($name, $command) = do $file;
	if ($@) {
		warn "Loading $file failed: $@\n";
	}
	$commands{$name} = $command;
}

# connect to RPC server

$rpc = Cluenet::Rpc::Client->new;
$rpc->{callbacks} = {
	user => \$user,
};
$rpc->{verbose} = $verbose;
$rpc->{debug} = $debug;

$rpc->connect($host, $port);

# run requests

my $cmd = shift(@ARGV) // "help";
my $r;

given ($cmd) {
	when ("help") {
		my $cmd = shift(@ARGV);
		if (defined $cmd and defined $commands{$cmd}) {
			my $cinfo = $commands{$cmd};
			say "Usage:";
			say "";
			if (defined $cinfo->{usage}) {
				say joins(APPNAME, $cmd, $cinfo->{usage});
				if (defined $cinfo->{description}) {
					say "\t$cinfo->{description}";
				}
				say "";
			}
			if (defined $cinfo->{help}) {
				for my $subcmd (sort keys %{$cinfo->{help}}) {
					say joins(APPNAME, $cmd, $subcmd, $cinfo->{help}{$subcmd});
				}
				say "";
			}
		}
		elsif (defined $cmd) {
			die "Unknown command '$cmd'.\n";
		}
		else {
			check $r = request(cmd => "list");
			say "Usage:";
			say "";
			for my $cmd (sort keys %commands) {
				my $cinfo = $commands{$cmd};
				if (grep {!($_ ~~ @{$r->{commands}})} @{$cinfo->{requires}}) {
					next;
				}
				if (defined $cinfo->{usage}) {
					say joins(APPNAME, $cmd, $cinfo->{usage});
				} else {
					next;
				}
				if (defined $cinfo->{description}) {
					say "\t$cinfo->{description}";
				}
				say "";
			}
		}
	}
	when ("raw") {
		check $r = authenticate;
		print "perl: ";
		while (<STDIN>) {
			my %args = eval $_;
			$r = request(%args);
			print Data::Dumper->Dump([$r], ["Reply"]);
			print "perl: ";
		}
	}
	when (defined $commands{$cmd}) {
		$commands{$cmd}{command}->($cmd, $rpc);
	}
	default {
		die "Unknown command '$cmd'.\n";
	}
}
