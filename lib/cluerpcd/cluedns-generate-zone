#!/usr/bin/perl
use common::sense;
use Cluenet::Common;
use Cluenet::Rpc;
use Cluenet::Rpc::Server;
use Data::Dumper;
use DBI;
use File::Temp;
use Getopt::Long qw(:config bundling no_ignore_case);

use constant {
	DB_HOST		=> "DBI:mysql:host=localhost;database=grawity_cluedns",
	DB_USER		=> "cluedns",
	DB_PASSWD_FILE	=> "/cluenet/etc/cluerpcd/creds/mysql-dns",
};

sub format_rec {
	my ($rec) = @_;
	join("\t", $rec->{fqdn}, $rec->{ttl}, $rec->{type}, $rec->{data})."\n";
}

sub fetch_zone {
	my ($zone) = @_;

	my ($t, $dbh, $sth, $rec);

	$t = File::Temp->new(TEMPLATE => "zone.XXXXXXXX", TMPDIR => 1, UNLINK => 0);
	print $t "; Automatically generated by cluedns-generate-zone on ".gmtime."\n";
	print $t "\$ORIGIN ${zone}.\n";

	$dbh = DBI->connect(DB_HOST, DB_USER, read_line(DB_PASSWD_FILE), {
			PrintError => 0,
			RaiseError => 1,
			AutoCommit => 0,
		});

	$sth = $dbh->prepare(q[SELECT * FROM `records` WHERE zone = ? AND type = "SOA" LIMIT 1]);
	$sth->execute($zone);
	if ($rec = $sth->fetchrow_hashref) {
		my @soa = split(/\s+/, $rec->{data});
		$soa[2] = time;
		$rec->{data} = join(" ", @soa);
		print $t format_rec($rec);
	}

	$sth = $dbh->prepare(q[SELECT * FROM `records` WHERE zone = ? AND type != "SOA"]);
	$sth->execute($zone);
	while ($rec = $sth->fetchrow_hashref) {
		print $t format_rec($rec);
	}

	$dbh->disconnect;
	return $t;
}

sub check_zone {
	my (@args) = @_;
	open(my $fh, "-|", "named-checkzone", @args);
	chomp(my @out = <$fh>);
	return close($fh), @out;
}

my $zone;
my $precheck = 0;

GetOptions(
	'c'	=> \$precheck,
	'z=s'	=> \$zone,
) or die "$@";

$zone // die "Missing zone name\n";

if ($precheck) {
	my $fh = fetch_zone($zone);
	rpc_ext_main {
		my $data = shift;
		for my $rec (@$data) {
			print $fh format_rec($rec);
		}
		my ($ok, @out) = check_zone($zone, $fh->filename);
		#chmod(0640, $fh->filename) or
		unlink($fh->filename);
		return {$ok ? success : failure,
			output => \@out};
	};
}
else {
	my $f = fetch_zone($zone)->filename;
	my ($ok, @out) = check_zone($zone, $f);
	if ($ok) {
		#rename($f, "newzone");
		exit 0;
	}
	else {
		open(my $s, "|-", "/usr/sbin/sendmail", "-i", "grawity");
		say $s "From: ClueDNS";
		say $s "To: DNS administrators";
		say $s "";
		say $s "Automated generation of DNS zone '$zone' has failed. named-checkzone output follows.";
		say $s "";
		say $s for @out;
		say $s "(end)";
		close($s);

		unlink($f);
		exit 1;
	}
}
