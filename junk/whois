#!/usr/bin/php
<?php
const LDAP_SERVER = "ldap.cluenet.org";
const LDAP_BASE_DN = "dc=cluenet,dc=org";

function server_dn($host) {
	return sprintf("cn=%s,ou=servers,%s", $host, LDAP_BASE_DN);
}

function user_dn($user) {
	return sprintf("uid=%s,ou=people,%s", $user, LDAP_BASE_DN);
}

function put($key, $value) {
	$key .= ":";

	if ($value === false or $value === 'FALSE')
		$value = 'no';
	elseif ($value === true or $value === 'TRUE')
		$value = 'yes';

	printf("%-13s %s\r\n", $key, $value);
}

function each_put($key, $values) {
	for ($i = 0; $i < $values["count"]; $i++)
		put($key, $values[$i]);
}

function get_full_name($entry) {
	if (isset($entry["cn"])) {
		return $entry["cn"][0];
	} elseif (isset($entry["gecos"])) {
		$name = $entry["gecos"][0];
		$pos = strpos($name, ",");
		if ($pos === false)
			return $name;
		else
			return substr($name, 0, $pos);
	} elseif (isset($entry["givenName"])) {
		$name = $entry["givenName"][0];
		if (isset($entry["sn"]))
			$name .= " ".$entry["sn"][0];
		return $name;
	} else {
		return null;
	}
}

function format_user_name($entry) {
	$uid = $entry["uid"][0];
	$name = get_full_name($entry);
	if ($name !== null and $name != $uid)
		return "$uid ($name)";
	else
		return $uid;
}

function display_server($entry) {
	$hostname = $entry["cn"][0];
	$fqdn = "{$hostname}.";
	put("hostname", strtoupper($hostname));

	foreach (dns_get_record($fqdn, DNS_CNAME) as $rec)
		put("alias", $rec["target"]);
	foreach (dns_get_record($fqdn, DNS_A) as $rec)
		put("address", $rec["ip"]);
	foreach (dns_get_record($fqdn, DNS_AAAA) as $rec)
		put("address", $rec["ipv6"]);

	put("owner", format_user_name($entry["owner"]));
	foreach ($entry["admin"] as $adm)
		put("admin", format_user_name($adm));

	$flags = array();
	if (isset($entry["isActive"]) and $entry["isActive"][0] == 'TRUE')
		$flags[] = "active";
	else
		$flags[] = "inactive";
	if (isset($entry["userAccessible"]) and $entry["userAccessible"][0] == 'TRUE')
		$flags[] = "public";
	else
		$flags[] = "private";
	if (isset($entry["isOfficial"]) and $entry["isOfficial"][0] == 'TRUE')
		$flags[] = "official";
	else
		$flags[] = "not official";
	put("status", implode(", ", $flags));

	if (isset($entry["purpose"]))
		each_put("purpose", $entry["purpose"]);

	print("\r\n");
}

function display_person($entry, $full=true) {
	if (!isset($entry["uid"]))
		return;

	$uid = $entry["uid"][0];

	$full_name = get_full_name($entry);
	if ($full_name === null || $full_name == $uid)
		put("person", $uid);
	else
		put("person", "$full_name ($uid)");

	if ($full)
		put("uid", $entry["uidNumber"][0]);

	if (isset($entry["mail"]))
		put("e-mail", $entry["mail"][0]);
	if (isset($entry["altEmail"]))
		each_put("e-mail", $entry["altEmail"]);
	
	$contact = array(
		'aimSn' => 'aim',
		'msnSn' => 'msn',
		'xmppUri' => 'xmpp',
	);

	if ($full) {
		foreach ($contact as $attr => $name)
			if (isset($entry[$attr]))
				for ($i=0; $i < $entry[$attr]["count"]; $i++)
					put("contact", $name.": ".$entry[$attr][$i]);

		if (isset($entry["url"]))
			each_put("url", $entry["url"]);
	}
	
	print("\r\n");
}

function fetch_item($dn, $filter="objectClass=*") {
	global $lh;
	#printf("# looking up %s (%s)\r\n", $dn, $filter);
	$results = @ldap_read($lh, $dn, $filter);
	if (!$results) {
		return false;
	} else {
		$entry = ldap_first_entry($lh, $results);
		return ldap_get_attributes($lh, $entry);
	}
}

if (count($argv) < 2) {
	print("Invalid request\n");
	exit(2);
}

$type = $argv[1];

if (isset($argv[2]))
	$request = $argv[2];
else
	$request = rtrim(fgets(STDIN));

# connect to LDAP
$lh = ldap_connect(LDAP_SERVER);
if (!$lh) {
	printf("Error: LDAP connection failed\r\n");
	exit(2);
}
ldap_set_option($lh, LDAP_OPT_PROTOCOL_VERSION, 3);
ldap_bind($lh, NULL, NULL);

if ($type === "server") {
	$server = fetch_item(server_dn($request), "objectClass=server");
	if (!$server) {
		printf("Error: server '%s' not found\r\n", $request);
		exit(1);
	}

	$server["owner"] = fetch_item($server["owner"][0], "objectClass=person");
	$server["admin"] = array();

	$admins = &$server["authorizedAdministrator"];
	if (isset($admins))
		for ($i=0; $i < $admins["count"]; $i++)
			$server["admin"][] = fetch_item($admins[$i], "objectClass=person");

	usort($server["admin"], function($a, $b) {
		return strcmp($a["uid"][0], $b["uid"][0]);
	});

	display_server($server);

	display_person($server["owner"], false);

	foreach ($server["admin"] as $user) {
		display_person($user, false);
	}

} elseif ($type == "person") {
	$user = fetch_item(user_dn($request), "objectClass=person");
	if (!$user) {
		printf("Error: user '%s' not found\r\n", $request);
		exit(1);
	}
	display_person($user);
} else {
	print("Invalid request\n");
}
