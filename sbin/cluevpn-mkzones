#!/usr/bin/env perl
# Creates zone files for vpn.cluenet.org and 210.156.10.in-addr.arpa according
# to OpenVPN client list and static configuration.
# <grawity@gmail.com>

use strict;
use IO::Socket::UNIX;
use Net::CIDR;
use Data::Dumper;

use constant {
	USER_DOMAIN	=> "vpn.cluenet.org.",
	OVPN_MGMT_SOCK	=> "/run/openvpn.210.mgmt",
	SOA_RP		=> "grawity.nullroute.eu.org.",
};

my %status;
my $ttl;
my %zone;

sub debug_log {
	warn @_ if ($ENV{DEBUG} // 0);
}

sub ovpn_get_status_v3 {
	my ($file) = @_;
	my @clients = ();
	my @routes = ();

	my $fh = IO::Socket::UNIX->new(Peer => OVPN_MGMT_SOCK)
		or die $!;
	print $fh "status 3\n";
	while (<$fh>) {
		s/\r\n$//;
		my @line = split(/\t/, $_);
		debug_log "== mgmt_sock status reply ==\n", Dumper(\@line);
		if ($line[0] eq "END") {
			last;
		}
		elsif ($line[0] eq "CLIENT_LIST") {
			push @clients, {
				user => ($line[1] eq "UNDEF" ? undef : $line[1]),
				addr => $line[2],
				vaddr => $line[3],
				sent => int $line[4],
				rcvd => int $line[5],
			};
		}
		elsif ($line[0] eq "ROUTING_TABLE") {
			if ($line[1] =~ /[a-z]/i) {
				warn "Strange address '$line[1]' in routing table:\n";
				warn "Full entry: $_\n";
				next;
			}
			push @routes, {
				addr => $line[1],
				user => $line[2],
				nexthop => $line[3],
			};
		}
	}
	print $fh "quit\n";
	close $fh;
	return (clients => \@clients, routes => \@routes);
}

sub ip4_to_arpa {
	my ($addr) = @_;
	return join(".", reverse(split /\./, $addr), "in-addr.arpa.");
}

sub mk_zones {
	my @common = (
		{owner => '@', type => "SOA", data => [
			"equal.cluenet.org.",
			SOA_RP,
			time(),
			"1h", #refresh
			"1h", #retry
			"1d", #expire
			"30m", #minttl
		]},
		{owner => '@', type => "NS", data => ["equal.cluenet.org."]},
	);

	my %static = do "/etc/cluevpn-static-dns";

	my @fwd = @common;
	if (defined $static{forward}) {
		push @fwd, @{$static{forward}};
	}

	my @rev = @common;
	if (defined $static{reverse}) {
		push @rev, @{$static{reverse}};
	}

	for my $entry (@rev) {
		if (!defined $entry->{owner}) {
			if (defined $entry->{ip}) {
				$entry->{owner} = ip4_to_arpa($entry->{ip});
			}
			else {
				warn "Missing 'owner' or 'ip' fields for reverse entry: ".Dumper($entry);
			}
		}
	}

	my @ignore = ();
	if (defined $static{ignore}) {
		push @ignore, @{$static{ignore}};
	}

	# normal VPN connections
	for my $client (@{$status{clients}}) {
		next if !defined($client->{user});

		push @fwd, {
			owner => $client->{user}.".".USER_DOMAIN,
			type => "A",
			data => [$client->{vaddr}],
		};

		next if $client->{vaddr} ~~ @ignore;
		push @rev, {
			owner => ip4_to_arpa($client->{vaddr}),
			type => "PTR",
			data => [$client->{user}.".".USER_DOMAIN],
		};

		push @ignore, $client->{vaddr};
	}

	# additional routes
	for my $route (@{$status{routes}}) {
		next if !defined($route->{user});
		next if $route->{addr} ~~ @ignore;

		my $name = $route->{user}."-lan";
		push @rev, {
			owner => ip4_to_arpa($route->{addr}),
			type => "PTR",
			data => [$name.".".USER_DOMAIN],
		};
		for my $net (Net::CIDR::cidr2octets($route->{addr})) {
			next if $net ~~ @ignore;
			my @net = split /\./, $net;
			if (@net < 4) {
				# yes, I know this totally fucks up A's when the subnet
				# is /24 or larger. (As if that's gonna happen.)
				push @net, "*";
			}
			push @fwd, {
				owner => $name,
				type => "A",
				data => [join(".", @net)],
			};
			push @rev, {
				owner => join(".", reverse(@net), "in-addr.arpa."),
				type => "CNAME",
				data => [ip4_to_arpa($route->{addr})],
			};
		}
	}

	return (forward => \@fwd, reverse => \@rev);
}

sub print_zone {
	my ($fd, $origin, $zone, $ttl) = @_;
	print $fd "; Auto-generated by update-cluevpn-dns\n";
	print $fd "\$ORIGIN $origin\n";
	print $fd "\$TTL $ttl\n";
	for my $rr (@$zone) {
		$rr->{owner} =~ s/\.\Q$origin\E$//;
		$rr->{owner} =~ s/^\Q$origin\E$/@/;
		print $fd join("\t",
			$rr->{owner},
			$rr->{class} // "IN",
			$rr->{type},
			join(" ", @{$rr->{data}}),
		)."\n";
	}
}

%status = ovpn_get_status_v3();

debug_log "== %status ==\n", Dumper(\%status);

$ttl = "10m";
%zone = mk_zones;
open my $fd, ">", "/var/cache/bind/vpn-forward.db" or die $!;
print_zone($fd, USER_DOMAIN, $zone{forward}, $ttl);
close $fd;

open my $fd, ">", "/var/cache/bind/vpn-reverse.db" or die $!;
print_zone($fd, "210.156.10.in-addr.arpa.", $zone{reverse}, $ttl);
close $fd;

system("rndc", "reload", USER_DOMAIN);
system("rndc", "reload", "210.156.10.in-addr.arpa.");

