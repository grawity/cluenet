#!/usr/bin/env perl
# Creates zone files for vpn.cluenet.org and 210.156.10.in-addr.arpa according
# to OpenVPN client list and static configuration.
# <grawity@gmail.com>

use strict;
use IO::Socket::UNIX;
use Net::CIDR;
use Data::Dumper;

use constant {
	USER_DOMAIN	=> "vpn.cluenet.org.",
	OVPN_MGMT_SOCK	=> "/run/openvpn.210.mgmt",
	SOA_RP		=> "grawity.nullroute.eu.org.",
};

my %zone;

sub ip4_to_arpa {
	my ($addr) = @_;
	return join(".", reverse(split /\./, $addr), "in-addr.arpa.");
}

sub openvpn_get_status {
	my ($file) = @_;

	my @clients;
	my @routes;

	my $fh = IO::Socket::UNIX->new(Peer => OVPN_MGMT_SOCK) or die $!;

	print $fh "status 3\n";
	while (<$fh>) {
		s/\r\n$//;
		my @line = split /\t/;
		if ($line[0] eq "END") {
			last;
		}
		elsif ($line[0] eq "CLIENT_LIST") {
			push @clients, {
				user => ($line[1] eq "UNDEF" ? undef : $line[1]),
				addr => $line[2],
				vaddr => $line[3],
				sent => int $line[4],
				rcvd => int $line[5],
			};
		}
		elsif ($line[0] eq "ROUTING_TABLE") {
			if ($line[1] =~ /[a-z]/i) {
				warn "Strange address '$line[1]' in routing table:\n";
				warn "Full entry: $_\n";
				next;
			}
			push @routes, {
				addr => $line[1],
				user => $line[2],
				nexthop => $line[3],
			};
		}
	}

	print $fh "quit\n";
	close $fh;

	return (\@clients, \@routes);
}

sub create_zones {
	my ($clients, $routes) = @_;

	our (@common, @forward, @reverse, @ignore);

	do "/cluenet/etc/cluevpn/static-dns";

	unshift @forward, @common;
	unshift @reverse, @common;

	for my $entry (@reverse) {
		if (!defined $entry->{owner}) {
			if (defined $entry->{ip}) {
				$entry->{owner} = ip4_to_arpa($entry->{ip});
			} else {
				warn "Missing 'owner' or 'ip' fields for reverse entry: ".Dumper($entry);
			}
		}
	}

	for my $client (@$clients) {
		next unless defined($client->{user});
		push @forward, {
			owner => $client->{user}.".".USER_DOMAIN,
			type => "A",
			data => [$client->{vaddr}],
		};
		next if $client->{vaddr} ~~ @ignore;
		push @reverse, {
			owner => ip4_to_arpa($client->{vaddr}),
			type => "PTR",
			data => [$client->{user}.".".USER_DOMAIN],
		};
		push @ignore, $client->{vaddr};
	}

	for my $route (@$routes) {
		next unless defined($route->{user});
		next if $route->{addr} ~~ @ignore;

		my $name = $route->{user}."-lan";
		push @reverse, {
			owner => ip4_to_arpa($route->{addr}),
			type => "PTR",
			data => [$name.".".USER_DOMAIN],
		};

		# TODO: debugging
		warn Dumper($route) if -t 1;
		if ($route->{addr} !~ m|/|) {
			$route->{addr} .= "/32";
		}
		my @octets = eval { Net::CIDR::cidr2octets($route->{addr}) };
		if ($@) {
			my $x = $route->{addr};
			die "cidr2octets('$x') failed: $@";
		}
		warn Dumper(\@octets) if -t 1;

		for my $net (@octets) {
			next if $net ~~ @ignore;
			my @net = split /\./, $net;
			if (@net < 4) {
				# TODO: fucks up A records if subnet is /24 or larger
				push @net, "*";
			}
			push @forward, {
				owner => $name,
				type => "A",
				data => [join(".", @net)],
			};
			push @reverse, {
				owner => join(".", reverse(@net), "in-addr.arpa."),
				type => "CNAME",
				data => [ip4_to_arpa($route->{addr})],
			};
		}
	}

	return \@forward, \@reverse;
}

sub print_zone {
	my ($fd, $zone, $origin, $ttl) = @_;

	my $time = scalar localtime;
	print $fd "; Auto-generated by cluevpn-mkzones on $time\n";
	print $fd "\n";
	print $fd "\$ORIGIN $origin\n";
	print $fd "\$TTL $ttl\n";
	print $fd "\n";
	for my $rr (@$zone) {
		$rr->{owner} =~ s/\.\Q$origin\E$//;
		$rr->{owner} =~ s/^\Q$origin\E$/@/;
		$rr->{class} //= "IN",
		$rr->{_data} = join(" ", @{$rr->{data}});

		print $fd join("\t", $rr->{owner}, $rr->{class},
					$rr->{type}, $rr->{_data})."\n";
	}
}

my $ttl = "10m";
my $dir = "/var/cache/bind";

my ($clients, $routes) = openvpn_get_status();

my ($forward, $reverse) = create_zones($clients, $routes);

open(my $fd, ">", "$dir/vpn-forward.db") or die $!;
print_zone($fd, $forward, USER_DOMAIN, $ttl);
close $fd;

open(my $fd, ">", "$dir/vpn-reverse.db") or die $!;
print_zone($fd, $reverse, "210.156.10.in-addr.arpa.", $ttl);
close $fd;

system("rndc", "reload", USER_DOMAIN);
system("rndc", "reload", "210.156.10.in-addr.arpa.");
